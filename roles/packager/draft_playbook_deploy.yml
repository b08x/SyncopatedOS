---
- name: Manage Local Repository
  hosts: localhost
  become: yes
  tasks:
    - name: Set GPG key
      set_fact:
        GPG: "36A6ECD355DB42B296C0CEE2157CA2FC56ECC96A"

    - name: Set Mirrors
      set_fact:
        MIRRORS:
          - "bender.syncopated.net"
          - "ec2-user@syncopated.hopto.org"
      # You can uncomment the line below if you want to use only one mirror.
      # set_fact:
      #   MIRRORS:
      #     - "bender.syncopated.net"

    - name: Set Variables
      set_fact:
        PACKAGES: "{{ lookup('env', 'HOME') }}/Packages"
        LOCAL_REPO: "{{ lookup('env', 'HOME') }}/Repository"

    - name: Prompt for GPG passphrase
      ansible.builtin.vars_prompt:
        prompt: "Enter GPG passphrase:"
        private: yes
      register: gpg_passphrase

    - name: Verify GPG passphrase input
      fail:
        msg: "GPG passphrase is required."
      when: gpg_passphrase is not defined

    - name: Set GPG Passphrase
      set_fact:
        phrase: "{{ gpg_passphrase['password'] }}"

    - name: Set Architectures
      set_fact:
        architectures:
          - "x86_64"
          - "x86_64_v3"

    - name: Iterate over architectures
      loop: "{{ architectures }}"
      loop_control:
        loop_var: arch
      tasks:
        - name: Determine repo_db based on architecture
          set_fact:
            repo_db: "{{ 'syncopated.db.tar.gz' if arch == 'x86_64' else 'syncopated-v3.db.tar.gz' }}"

        - name: Change to the appropriate directory
          command: "cd {{ PACKAGES }}/{{ arch }}"
          args:
            chdir: "{{ PACKAGES }}/{{ arch }}"

        - name: Select packages to move into the repository
          command: "fd . -e .zst -a {{ PACKAGES }}/{{ arch }} -x echo -e {}"
          register: package_selection
          changed_when: false

        - name: Check if package selection is empty
          fail:
            msg: "Package selection is empty."
          when: package_selection.stdout_lines | length == 0

        - name: Move selected packages to LOCAL_REPO
          command: "mv -v {{ item }} {{ LOCAL_REPO }}/{{ arch }}"
          loop: "{{ package_selection.stdout_lines }}"
          when: package_selection.stdout_lines | length > 0
          args:
            creates: "{{ LOCAL_REPO }}/{{ arch }}/{{ item | basename }}"

        - name: Change to LOCAL_REPO directory for signing
          command: "cd {{ LOCAL_REPO }}/{{ arch }}"
          args:
            chdir: "{{ LOCAL_REPO }}/{{ arch }}"

        - name: Sign packages
          command: "echo {{ phrase }} | gpg2 -v --batch --yes --detach-sign --pinentry-mode loopback --passphrase --passphrase-fd 0 --out {{ LOCAL_REPO }}/{{ arch }}/{{ item }}.sig --sign {{ item }}"
          loop: "{{ package_selection.stdout_lines }}"
          args:
            creates: "{{ LOCAL_REPO }}/{{ arch }}/{{ item }}.sig"

        - name: Refresh repository database
          command: "repo-add -n -k {{ GPG }} {{ repo_db }} *.pkg.tar.zst -s"
          args:
            chdir: "{{ LOCAL_REPO }}/{{ arch }}"
          when: package_selection.stdout_lines | length > 0

        - name: Sync local repository to remote mirrors
          ansible.builtin.synchronize:
            src: "{{ LOCAL_REPO }}/{{ arch }}/"
            dest: "/usr/share/nginx/html/repo/packages/archlinux/{{ arch }}/"
            delete: yes
          with_items: "{{ MIRRORS }}"
