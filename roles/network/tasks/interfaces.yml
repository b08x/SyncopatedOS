---

- name: Print host network vars
  debug:
    msg: "{{ item.value.ifname }}"
  with_dict: "{{ network.interfaces }}"
  tags: ['udev']

# - name: Set udev rules for wired NIC names
#   template:
#     src: etc/udev/rules.d/10-network.rules.j2
#     dest: /etc/udev/rules.d/10-network.rules
#     owner: root
#     group: root
#     mode: '0644'
#     backup: yes
#   with_items: "{{ network.interfaces }}"
#   # when: item.value.type == 'ethernet' or item.value.type == 'wifi'
#   tags: ['udev']

# - name: Set udev rule to set network interface names
#   copy:
#     content: |
#       SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="{{ item.value.ifname }}", NAME="{{ item.value.mac }}"
#     dest: "/etc/udev/rules.d/10-network.rules"
#     owner: root
#   with_dict: "{{ network.interfaces }}"
#   tags: ['udev']

# - name: Set udev rules for wireless NIC names
#   template:
#     src: etc/udev/rules.d/10-network.rules.j2
#     dest: /etc/udev/rules.d/10-network.rules
#     owner: root
#     group: root
#     mode: '0644'
#     backup: yes
#   with_dict: "{{ network.interfaces }}"
#   when:
#     - item.value.type == 'wifi'
#     - item.value.method4 != 'disabled'
#   tags: ['udev']

- name: Add ethernet device
  community.general.nmcli:
    type: "{{ item.value.type }}"
    ifname: "{{ item.value.ifname }}"
    conn_name: "{{ item.value.conn_name }}"
    mac: "{{ item.value.mac }}"
    ip4: "{{ item.value.ip4 }}"
    gw4: "{{ item.value.gw4 }}"
    dns4: "{{ item.value.dns4 }}"
    dns4_search: "{{ item.value.dns4_search }}"
    autoconnect: "{{ item.value.autoconnect }}"
    state: "{{ item.value.state }}"
    method4: "{{ item.value.method4 }}"
  with_dict: "{{ network.interfaces }}"
  when:
    - item.value.type == 'ethernet'
    - item.value.conn_name == item.value.ifname
    - item.value.method4 != 'disabled'

- name: Add static wifi device
  community.general.nmcli:
    type: "{{ item.value.type }}"
    ifname: "{{ item.value.ifname }}"
    conn_name: "{{ item.value.conn_name }}"
    ip4: "{{ item.value.ip4 }}"
    gw4: "{{ item.value.gw4 }}"
    dns4: "{{ item.value.dns4 }}"
    autoconnect: "{{ item.value.autoconnect }}"
    state: "{{ item.value.state }}"
    method4: "{{ item.value.method4 }}"
    wifi:
      mac-address: "{{ item.value.mac }}"
      cloned-mac-address: "{{ item.value.assigned_address }}"
    ssid: "{{ item.value.ssid }}"
    # wifi_sec:
    #   key-mgmt: "{{ item.value.wifi_sec.key_mgmt }}"
    #   psk: "{{ item.value.wifi_sec.psk }}"
  with_dict: "{{ network.interfaces }}"
  when:
    - item.value.type == 'wifi'
    - item.value.method4 != 'disabled'
    - item.value.ip4 is defined
  tags: ['wireless']

- name: Add dhcp wifi device
  community.general.nmcli:
    type: "{{ item.value.type }}"
    ifname: "{{ item.value.ifname }}"
    conn_name: "{{ item.value.conn_name }}"
    autoconnect: "{{ item.value.autoconnect }}"
    state: "{{ item.value.state }}"
    method4: "{{ item.value.method4 }}"
    wifi:
      mac-address: "{{ item.value.mac }}"
      cloned-mac-address: "{{ item.value.assigned_address }}"
    ssid: "{{ item.value.ssid }}"
    # wifi_sec:
    #   key-mgmt: "{{ item.value.wifi_sec.key_mgmt }}"
    #   psk: "{{ item.value.wifi_sec.psk }}"
  with_dict: "{{ network.interfaces }}"
  when:
    - item.value.type == 'wifi'
    - item.value.method4 != 'disabled'
  tags: ['wireless']

- name: Add audio subnet device
  community.general.nmcli:
    type: "{{ item.value.type }}"
    ifname: "{{ item.value.ifname }}"
    conn_name: "{{ item.value.conn_name }}"
    mac: "{{ item.value.mac }}"
    ip4: "{{ item.value.ip4 }}"
    autoconnect: "{{ item.value.autoconnect }}"
    state: "{{ item.value.state }}"
    method4: "{{ item.value.method4 }}"
  with_dict: "{{ network.interfaces }}"
  when:
    - item.value.conn_name == 'audio'
    - item.value.method4 != 'disabled'

- name: Add bridge device
  community.general.nmcli:
    type: "{{ item.value.type }}"
    ifname: "{{ item.value.ifname }}"
    conn_name: "{{ item.value.conn_name }}"
    ip4: "{{ item.value.ip4 }}"
    gw4: "{{ item.value.gw4 }}"
    dns4: "{{ item.value.dns4 }}"
    autoconnect: "{{ item.value.autoconnect }}"
    state: "{{ item.value.state }}"
    method4: "{{ item.value.method4 }}"
  with_dict: "{{ network.interfaces }}"
  when:
    - item.value.type == 'bridge'
    - item.value.method4 != 'disabled'

- name: Add bridge slave
  community.general.nmcli:
    type: "{{ item.value.type }}"
    ifname: "{{ item.value.ifname }}"
    conn_name: "{{ item.value.conn_name }}"
    master: "{{ item.value.bridge }}"
    autoconnect: "{{ item.value.autoconnect }}"
    state: "{{ item.value.state }}"
    method4: "{{ item.value.method4 }}"
  with_dict: "{{ network.interfaces }}"
  when:
    - item.value.type == 'ethernet'
    - item.value.bridge is defined
    - item.value.method4 != 'disabled'

- name: Deactive device
  community.general.nmcli:
    type: "{{ item.value.type }}"
    ifname: "{{ item.value.ifname }}"
    conn_name: "{{ item.value.conn_name }}"
    mac: "{{ item.value.mac }}"
    autoconnect: "{{ item.value.autoconnect }}"
    state: "{{ item.value.state }}"
    method4: "{{ item.value.method4 }}"
  with_dict: "{{ network.interfaces }}"
  when:
    - item.value.type == 'ethernet'
    - item.value.method4 == 'disabled'

- name: Deactive device
  community.general.nmcli:
    type: "{{ item.value.type }}"
    ifname: "{{ item.value.ifname }}"
    conn_name: "{{ item.value.conn_name }}"
    autoconnect: "{{ item.value.autoconnect }}"
    state: "{{ item.value.state }}"
    method4: "{{ item.value.method4 }}"
    ssid: "{{ item.value.ssid }}"
    wifi:
      mac-address: "{{ item.value.mac }}"
  with_dict: "{{ network.interfaces }}"
  when:
    - item.value.type == 'wifi'
    - item.value.method4 == 'disabled'

- name: Ensure NetworkManager is enabled and restart service
  systemd:
    name: NetworkManager
    enabled: yes
    state: restarted
