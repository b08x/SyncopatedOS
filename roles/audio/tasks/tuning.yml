---

# tasks file for desktop
- name: Collect only selected facts
  setup:
    filter:
      - 'ansible_system_vendor'

- name: Ensure user belongs to audio group
  user:
    name: "{{ user.name }}"
    groups: "audio"
    append: yes

- name: Set rtprio, memlock and nice for audio group
  copy:
    content: |
      @audio  - rtprio  98
      @audio  - nice    -19
      @audio  - memlock unlimited
    dest: "/etc/security/limits.d/99-realtime.conf"
    mode: '0644'
    backup: True

# It is safe to have this file even if
# your hardware contains neither device
# source: https://gentoostudio.org/?page_id=420
- name: Set timer permissions in udev rules
  copy:
    content: |
      KERNEL=="rtc0", GROUP="audio"
      KERNEL=="hpet", GROUP="audio"
    dest: "/etc/udev/rules.d/40-timer-permissions.rules"
    mode: '0644'

- name: Set sysctl parameters
  copy:
    src: etc/sysctl.d/99-cachyos-settings.conf
    dest: /etc/sysctl.d/99-cachyos-settings.conf
    mode: '0644'
    backup: True
  tags: ['sysctl']

- block:
    - name: Install Tuned
      aur:
        use: paru
        name: tuned
        state: present
        extra_args: "--overwrite '*'"
      become: False
      tags: ['packages']

    - name: Enable tuned service
      systemd:
        name: tuned
        enabled: yes
        state: started
      register: tuned_service
      ignore_errors: "{{ ansible_check_mode }}"

    # - name: print tuned_service output
    #   debug:
    #     msg: "{{ tuned_service }}"
    #   when:

    - name: Install realtime-modified profile
      copy:
        src: etc/tuned/realtime-modified/tuned.conf
        dest: /etc/tuned/realtime-modified/tuned.conf
        owner: root
        group: root
        mode: '0644'

    - name: Set tuned profile
      shell: |
        tuned-adm profile {{ tuned.profile }}
      register: tuned_profile
      changed_when: tuned_profile.rc != 0
      when: tuned_service.state == 'started'
      ignore_errors: "{{ ansible_check_mode }}"

    # - name: print tuned_service
    #   debug:
    #     msg: "{{ tuned_profile }}"
    #   when:

  tags: ['tuned']


- block:
    - name: Install rtirq & rtkit
      aur:
        use: auto
        name: "rtkit,rtirq"
        state: present
      become: False
      tags: ['packages']

    - name: Set rtirq defaults
      copy:
        src: etc/sysconfig/rtirq
        dest: /etc/rtirq.conf
        directory_mode: no
        owner: root
        group: root
        mode: '0644'
      register: rtirq_config

    # rtkit package should be Installed before this happens
    - name: Set rtkit parameters
      copy:
        src: etc/rtkit.conf
        dest: /etc/rtkit.conf
        directory_mode: no
        owner: root
        group: root
        mode: '0644'
      register: rtkit_conf

    - name: Set rtkit systemd parameters
      template:
        src: usr/lib/systemd/system/rtkit-daemon.service.j2
        dest: /usr/lib/systemd/system/rtkit-daemon.service
        mode: '0644'
      register: rtkit_systemd

  tags: ['rtirq', 'rtkit']
  notify:
    - "enable rtirq service"
    - "enable rtkit service"

- block:

    - name: Install cpupower
      aur:
        use: auto
        name: cpupower
        state: present
      become: False
      tags: ['packages']

    - name: Set cpucpower defaults
      template:
        src: etc/default/cpupower.j2
        dest: /etc/default/cpupower
        mode: '0644'
        backup: yes

    - name: Enable cpupower service
      service:
        name: cpupower
        enabled: True
      when: ansible_system_vendor != "QEMU"
      ignore_errors: "{{ ansible_check_mode }}"

  tags: ['cpupower']

# Do not use the irqbalance daemon, or do so carefully [4].
# https://wiki.archlinux.org/title/Professional_audio#Tips_and_tricks
- name: Disable irqbalance service
  service:
    name: irqbalance
    enabled: False
  ignore_errors: True

# - name: Disable ananicy-cpp and bpftune
#   service:
#     name: "{{ item }}"
#     enabled: False
#   ignore_errors: True
#   loop:
#     - ananicy-cpp
#     - bpftune
