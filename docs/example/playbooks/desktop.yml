---
- hosts: all
  become: True
  gather_subset:
    - hardware
    - network
  vars_files:
    - vars/theme.yml
  vars:
    cleanup: True
    path:
      - "{{ lookup('env','HOME') }}/.local/bin"
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/bin:{{ path|join(':') }}"
    PKG_CONFIG_PATH: "/usr/share/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig"
    ZSH: "/usr/share/oh-my-zsh"
    DISPLAY: ":0"

  pre_tasks:
    - name: warn about setting ANSIBLE_HOME
      debug:
        msg: "besure ANSIBLE_HOME is set to this directory"
      tags: ["always"]

    - name: Set datetime
      set_fact:
        datetime: ansible_date_time.epoch
      tags: ["always"]

    - name: Set suffix
      set_fact:
        suffix: ".{{ ansible_date_time.epoch }}.{{ ansible_date_time.date }}@{{ ansible_date_time.time }}~"
      tags: ["always"]

    - name: Set admin group name
      set_fact:
        admin_group: wheel
      tags: ["always"]

    - name: Check -march support
      shell: |
        /lib/ld-linux-x86-64.so.2 --help | grep supported|xargs|awk '{print $1}'
      register: supported_march
      tags: ["always"]
      check_mode: False

    - block:
        - name: Set architecture
          set_fact:
            architecture: "x86-64-v3"
          when: supported_march.stdout_lines[0] == 'x86-64-v3'

        - name: Set architecture
          set_fact:
            architecture: "x86-64"
          when: supported_march.stdout_lines[0] == 'x86-64-v2'

      when: supported_march.stdout_lines[0] is defined
      tags: ["always"]
      check_mode: False

    - name: Show desktop variables
      debug:
        msg: "{{ i3 }}"
      tags: ['always']

  roles:
    - role: common

    - role: terminal
      tags: ["terminal"]

    - role: network
      tags: ["network"]

    - role: ruby
      tags: ["ruby"]

    - role: alsa
      tags: ["audio"]

    - role: pipewire
      tags: ["pipewire"]

    - role: jack
      tags: ["audio"]

    - role: pulseaudio
      tags: ["audio"]

    - role: audio
      tags: ["audio"]

    - role: docker
      tags: ['docker']

    - role: libvirt
      tags: ['libvirt']

    - role: theme
      tags: ["theme"]

    - role: desktop
      tags: ['desktop']

    - role: user
      tags: ["user"]

    - role: applications
      tags: ['applications']

  # tasks:
  #
  #   - name: test task
  #     debug:
  #       msg: "{{ package_install_command }}"

  post_tasks:
    - name: Cleanup old backup files
      script: "/usr/local/bin/cleanup.sh"
      when: cleanup is defined
      tags: ["cleanup"]

  #     # Reset is not implemented local connection
  #     - name: Reboot host
  #       reboot:
  #       async: 1
  #       poll: 0
  #       ignore_errors: True
  #       when: reboot is defined
  #       tags: ['reboot']
  #
  #     - name: Wait for host to reboot
  #       wait_for_connection:
  #         connect_timeout: 20
  #         sleep: 5
  #         delay: 5
  #         timeout: 120
  #       when: reboot is defined
  #       tags: ['reboot']
  #
  #     - name: Ensure reboot was successful
  #       debug:
  #         msg: "Reboot success!"
  #       when: reboot is defined
  #       tags: ['reboot']
