---
- hosts: localhost
  become: True
  gather_facts: yes
  vars:
    path:
      - "{{ lookup('env','HOME') }}/.asdf/bin"
      - "{{ lookup('env','HOME') }}/.local/bin"
      - "{{ lookup('env','HOME') }}/Utils/bin"
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/bin:{{ path|join(':') }}"
    PKG_CONFIG_PATH: "/usr/share/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig"
    ZSH: "/usr/share/oh-my-zsh"
    DISPLAY: ":0"
  # variables from vars_files are available starting here...
  pre_tasks:
    # the task will run if `check_mode` to 'no'
    - name: Register timestamp
      shell: "date +'%s.%Y-%m-%d@%H:%M:%S~'"
      register: timestamp
      check_mode: no
      tags: ["always"]

    - name: Set suffix
      set_fact:
        suffix: "{{ timestamp.stdout_lines[0] }}"
      tags: ["always"]

    - name: Set Distro Name
      set_fact:
        ansible_distribution: "{{ distro }}"
      when: distro is defined
      tags: ["always", "testing"]

    - setup:
    - debug:
        msg: System {{ inventory_hostname }} has distro {{ ansible_distribution }}
      tags: ['always']

    - setup:
    - debug:
        msg: System {{ inventory_hostname }} belongs to distro group {{ ansible_os_family }}
      tags: ['always']

    - name: Symlink /etc/os-release to /etc/system-release
      file:
        src: /etc/os-release
        dest: /etc/system-release
        state: link

    - name: Set admin group name
      set_fact:
        admin_group: wheel
      when: ansible_os_family == 'Archlinux'
      tags: ["always"]

    - name: Set admin group name
      set_fact:
        admin_group: sudo
      when: ansible_os_family == 'Debian'
      tags: ["always"]

  roles:

    - role: user
      tags: ["user"]

    - role: shell
      tags: ["shell"]

    - role: base
      tags: ["base"]

    - role: network
      tags: ["network"]
    #
    # - role: ruby
    #   tags: ["ruby"]
    #
    # - role: docker
    #   when: use_docker == True
    #   tags: ["docker"]
    #
    # - role: libvirt
    #   when: use_libvirt == True
    #   tags: ["libvirt"]
    #
    # - role: audio
    #   tags: ["audio"]
    #
    # - role: desktop
    #   tags: ["desktop"]
    #
    # - role: multimedia
    #   tags: ["multimedia"]
    #
    # - role: daw
    #   # when: inventory_hostname in groups.get('daw', [])
    #   tags: ["daw"]
    #
    # - role: development
    #   when: inventory_hostname in groups.get('dev', [])
    #   tags: ["development"]


  # post_tasks:
  #   - name: Cleanup old backup files
  #     script: "{{ lookup('env','HOME') }}/Utils/bin/cleanup.sh"
  #     when: cleanup is defined
  #     tags: ["cleanup"]
  #
  #   - block:
  #       - name: Reboot the host
  #         reboot:
  #           msg: "Reboot initiated by Ansible"
  #           connect_timeout: 5
  #           reboot_timeout: 300
  #           pre_reboot_delay: 0
  #           post_reboot_delay: 30
  #           test_command: uptime
  #
  #     rescue:
  #       # Do not assume the inventory_hostname is resolvable and delay 10 seconds at start
  #       - name: Wait 600 seconds for port 22 to become open"
  #         ansible.builtin.wait_for:
  #           port: 22
  #           host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
  #           delay: 10
  #           timeout: 600
  #         connection: local
  #
  #     when: reboot is defined
  #     tags: ['reboot']
  #
  #   - name: Reboot successful
  #     debug:
  #       msg: "Reboot successful"
  #     tags: ['reboot']
