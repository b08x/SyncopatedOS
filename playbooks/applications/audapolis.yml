---

- name: Setup and Deploy Audapolis App
  hosts: lapbot
  become: False

  vars:
    repo_url: "https://github.com/bugbakery/audapolis.git"
    project_dir: "{{ lookup('env','HOME') }}/Workspace/audapolis"
    virtualenv_name: "audapolisenv"
    # path:
    #   - "{{ lookup('env','HOME') }}/.pyenv/bin"
    #   - "{{ lookup('env','HOME') }}/.pyenv/shims"
    pyrequirements:
      - "anyio==3.6.1"
      - "appdirs==1.4.4"
      - "certifi==2022.9.24"
      - "cffi==1.15.1"
      - "charset-normalizer==2.1.1"
      - "click==8.1.3"
      - "colorama==0.4.5"
      - "fastapi==0.85.0"
      - "h11==0.14.0"
      - "httptools==0.5.0"
      - "idna==3.4"
      - "joblib==1.2.0"
      - "numpy==1.23.3"
      # - "opentimelineio==0.14.1"
      - "pyaaf2==1.4.0"
      - "pycparser==2.21"
      - "pydantic==1.10.2"
      - "pydiar==0.0.6"
      - "pydub==0.25.1"
      - "python-dotenv==0.21.0"
      - "python-multipart==0.0.5"
      - "python-speech-features==0.6"
      - "pyyaml==6.0"
      - "requests==2.28.1"
      - "scikit-learn==1.1.2"
      - "scipy==1.9.1"
      - "setuptools==59.8.0"
      - "six==1.16.0"
      - "sniffio==1.3.0"
      - "srt==3.5.2"
      - "starlette==0.20.4"
      - "threadpoolctl==3.1.0"
      - "tqdm==4.64.1"
      - "typing-extensions==4.3.0"
      - "urllib3==1.26.12"
      - "uvicorn[standard]==0.18.3"
      - "uvloop==0.17.0"
      - "vosk==0.3.44"
      - "watchfiles==0.17.0"
      - "webrtcvad==2.0.10"
      - "websockets==10.3"
      - "setuptools<60.0.0"
      - "distutils"
  environment:
    # PATH: "{{ ansible_env.PATH }}:/sbin:/bin:{{ path|join(':') }}"
    ZSH: "/usr/share/oh-my-zsh"

  pre_tasks:
    - name: Gather system facts
      setup:
        gather_subset: network

    - block:
        - name: Install 'pyenv' (if not already installed)
          shell: curl https://pyenv.run | bash

        - name: Install 'pyenv-virtualenv' plugin
          git:
            repo: https://github.com/pyenv/pyenv-virtualenv.git
            dest: "{{ ansible_env.HOME }}/.pyenv/plugins/pyenv-virtualenv"

      when: ansible_facts['distribution'] != 'Archlinux'

#    - name: Install 'pyenv' (Arch Linux)
#      when: ansible_facts['distribution'] == 'Archlinux'
#      aur:
#        use: auto
#        name: "{{ item }}"
#        state: present
#      with_items:
#        - pyenv
#        - pyenv-virtualenv
#        - python-wheel
#        - opentimelineio
#        - python-distutils-extra

    - name: Add pyenv configurations to shell (optional, recommended)
      block:
       - lineinfile:
           path: "{{ ansible_env.HOME }}/.zshrc"  # Or .zshrc if Zsh is used
           line: 'export PYENV_ROOT="$HOME/.pyenv"'
       - lineinfile:
           path: "{{ ansible_env.HOME }}/.zshrc"  # Or .zshrc if Zsh is used
           line: '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"'
       - lineinfile:
           path: "{{ ansible_env.HOME }}/.zshrc"  # Or .zshrc if Zsh is used
           line: 'eval "$(pyenv init -)"'

  tasks:
    - name: Clone Audapolis Repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ project_dir }}"

    - setup:
    - debug:
        msg: Installing Python 3.10.0

    - name: check if 3.10.0 is already installed
      stat:
        path: "{{ ansible_env.HOME }}/.pyenv/versions/3.10.0"
      register: python_check
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Install Python 3.10
      when: not python_check.stat.exists
      shell: pyenv install 3.10.0
      args:
        chdir: "{{ project_dir }}"

    - name: List existing Python virtualenvs
      command: pyenv versions --bare
      register: existing_venvs

    - name: Check if Python Virtual Environment Already Exists
      stat:
        path: "{{ ansible_env.HOME }}/.pyenv/versions/3.10.0/envs/audapolisenv"
      register: venv_check
      ignore_errors: "{{ ansible_check_mode }}"

    - name: Create Python Virtual Environment
      when: not venv_check.stat.exists
      shell: |
        eval "$(pyenv init -)" && pyenv virtualenv 3.10.0 {{ virtualenv_name }}
      args:
        chdir: "{{ project_dir }}"

    - name: Install Server Dependencies (poetry)
      when: python_check.stat.exists
      shell: |
        eval "$(pyenv init -)" && pyenv activate {{ virtualenv_name }} && \
        pip install poetry opentimelineio
      args:
        chdir: "{{ project_dir }}/server"

    - name: Install Server Dependencies (poetry)
      shell: |
        eval "$(pyenv init -)" && pyenv activate {{ virtualenv_name }} && \
        poetry install
      args:
        chdir: "{{ project_dir }}/server"

    - name: Install requirements
      when: python_check.stat.exists
      shell: |
        eval "$(pyenv init -)" && pyenv activate {{ virtualenv_name }} && \
        pip install --no-cache-dir "{{ item }}"
      with_items: "{{ pyrequirements }}"
      args:
        chdir: "{{ project_dir }}"

    - setup:
    - debug:
        msg: "Installing App Dependencies..."

    - name: Install App Dependencies
      npm:
        path: "{{ project_dir }}/app"
        state: present

    # - name: Start Audapolis Server (in background)
    #   shell: nohup poetry run uvicorn app.main:app --reload &
    #   args:
    #     chdir: "{{ project_dir }}/server"
    #
    # - name: Start Audapolis Electron App
    #   shell: npm start
    #   args:
    #     chdir: "{{ project_dir }}/app"
