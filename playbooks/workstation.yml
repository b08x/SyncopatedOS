---
- hosts: workstation
  become: True
  gather_facts: yes
  vars:
    path:
      - "{{ lookup('env','HOME') }}/.asdf/bin"
      - "{{ lookup('env','HOME') }}/.local/bin"
  environment:
    PATH: "{{ ansible_env.PATH }}:/sbin:/bin:{{ path|join(':') }}"
    PKG_CONFIG_PATH: "/usr/share/pkgconfig:/usr/lib/pkgconfig:/usr/local/lib/pkgconfig"
    ZSH: "/usr/share/oh-my-zsh"
    DISPLAY: ":0"
  # variables from vars_files are available starting here...
  pre_tasks:
    # the task will run if `check_mode` to 'no'
    - name: Register timestamp
      shell: "date +'%s.%Y-%m-%d@%H:%M:%S~'"
      register: timestamp
      check_mode: no
      tags: ["always"]

    - setup:
    - debug:
        msg: System {{ inventory_hostname }} has distro {{ ansible_distribution }}
      tags: ['always']

    - name: Set suffix
      set_fact:
        suffix: "{{ timestamp.stdout_lines[0] }}"
      tags: ["always"]

    - name: Set expected_value
      set_fact:
        ansible_distribution: "{{ distro }}"
      when: distro is defined
      tags: ["always", "testing"]

    - name: Symlink /etc/os-release to /etc/system-release
      file:
        src: /etc/os-release
        dest: /etc/system-release
        state: link

    - name: Set admin group name
      set_fact:
        admin_group: wheel
      tags: ["always"]

  roles:

    - role: distro
      tags: ["distro"]

    - role: base
      tags: ["base"]

    - role: network
      tags: ["network"]

    - role: user
      tags: ["user"]

    - role: shell
      tags: ["shell"]

    - role: ruby
      tags: ["ruby"]

    - role: docker
      tags: ["docker"]

    - role: libvirt
      tags: ["libvirt"]

    - role: audio
      tags: ["audio"]

    - role: desktop
      tags: ["desktop"]

    - role: applications
      tags: ["applications"]

  post_tasks:
    - name: Cleanup old backup files
      script: "cleanup.sh"
      when: cleanup is defined
      tags: ["cleanup"]

    # Reset is not implemented local connection
    - name: Reboot host
      reboot:
      async: 1
      poll: 0
      ignore_errors: True
      when: reboot is defined
      tags: ['reboot']

    - name: Wait for host to reboot
      wait_for_connection:
        connect_timeout: 20
        sleep: 5
        delay: 5
        timeout: 120
      when: reboot is defined
      tags: ['reboot']

    - name: Ensure reboot was successful
      debug:
        msg: "Reboot success!"
      when: reboot is defined
      tags: ['reboot']
